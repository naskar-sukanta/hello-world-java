name: Build and Deploy to multiple self-hosted server

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  DEPLOYMENT_DIR: ~/apps/helloworld

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload artifact (jar)
        uses: actions/upload-artifact@v4
        with:
          name: java-helloworld-jar
          path: target/*.jar

  deploy-staging:
    runs-on: self-hosted
    needs: build
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        server: [13.202.81.29, 13.200.138.241]  # Replace with your actual server labels or IPs
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-helloworld-jar
          path: ./artifact

      - name: Move to deployment directory
        run: |
          mkdir -p $DEPLOYMENT_DIR
          JAR_FILE=$(ls ./artifact/*.jar | head -n 1)
          echo "Found JAR file: $JAR_FILE"
          mv "$JAR_FILE" $DEPLOYMENT_DIR/app.jar

      - name: Verify deployment
        run: |
          echo "Deployed to server: ${{ matrix.server }}"
          ls -la $DEPLOYMENT_DIR/

      - name: Restart application service (optional)
        run: |
          # Example: restart systemd service if you have one
          # sudo systemctl restart helloworld.service
          echo "Application would be restarted here on ${{ matrix.server }}"

  deploy-production:
    runs-on: self-hosted
    needs: build
    if: github.event.inputs.environment == 'production'
    
    strategy:
      matrix:
        server: [13.202.81.29, 13.200.138.241]  # Replace with your production server labels
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-helloworld-jar
          path: ./artifact

      - name: Backup previous version
        run: |
          mkdir -p $DEPLOYMENT_DIR/backups
          if [ -f "$DEPLOYMENT_DIR/app.jar" ]; then
            cp $DEPLOYMENT_DIR/app.jar $DEPLOYMENT_DIR/backups/app.jar.$(date +%Y%m%d%H%M%S)
          fi

      - name: Deploy new version
        run: |
          JAR_FILE=$(ls ./artifact/*.jar | head -n 1)
          echo "Deploying new version to ${{ matrix.server }}"
          mv "$JAR_FILE" $DEPLOYMENT_DIR/app.jar

      - name: Verify deployment
        run: |
          echo "Deployed to production server: ${{ matrix.server }}"
          ls -la $DEPLOYMENT_DIR/

      - name: Health check
        run: |
          echo "Performing health check on ${{ matrix.server }}"
          # Add your health check logic here
          # curl -f http://localhost:8080/health || exit 1

  post-deploy:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Deployment summary
        run: |
          echo "Deployment completed for environment: ${{ github.event.inputs.environment }}"
          echo "Staging servers deployed: ${{ needs.deploy-staging.result }}"
          echo "Production servers deployed: ${{ needs.deploy-production.result }}"